import hashlib
from time import sleep

import wikipedia
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.handlers.base.fsm import FSMPLayGame
from app.handlers.base.utils import game_func_one, game_func_two, game_func_three, game_func_four, game_func_five
from app.keyboards.simple import stop, start_keyboard, end_win_game_kb
from app.loader import dp


@dp.message_handler(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', state=FSMPLayGame.start)
async def start_game(message: types.Message, state=FSMContext):
    msg_one = await message.answer('–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑:')
    n = 3
    for _ in range(3):
        msg_two = await message.answer(n)
        sleep(1)
        await msg_two.delete()
        n -= 1
    await msg_one.delete()
    city = game_func_three()
    async with state.proxy() as proxy:
        proxy[f'{city[-1]}'] = True
    ikb = InlineKeyboardMarkup(row_width=1)
    alone = InlineKeyboardButton('–ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?', callback_data=f'accept:{city[-1]}')
    ikb.add(alone)
    await message.answer(f'–ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥: {city[-1]}', reply_markup=ikb)
    await FSMPLayGame.name.set()


@dp.message_handler(text='–°—Ç–æ–ø –∏–≥—Ä–∞', state=FSMPLayGame)
async def stop_game(message: types.Message, state=FSMContext):
    if message.from_user.username is not None:
        game_func_five(message.from_user.username)
    else:
        game_func_five(message.from_user.full_name)
    await message.answer('–ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É')
    sleep(2)
    async with state.proxy() as proxy:
        await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(list(proxy.as_dict().keys())) // 2}/30',
                             reply_markup=start_keyboard())
    await state.finish()


@dp.message_handler(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±–∑–æ—Ä –∏–≥—Ä—ã', state=FSMPLayGame)
async def end_win_game(message: types.Message, state=FSMContext):
    if message.from_user.username is not None:
        game_func_four(message.from_user.username)
    else:
        game_func_four(message.from_user.full_name)
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É –∏ –¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!', reply_markup=start_keyboard())
    await state.finish()


@dp.message_handler(state=FSMPLayGame.name)
async def go_game(message: types.Message, state=FSMContext):
    async with state.proxy() as proxy:
        if message.text[0].lower() != list(proxy.as_dict().keys())[-1][-1]:
            await message.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', reply_markup=stop())
        elif message.text.capitalize() in list(proxy.as_dict().keys()):
            await message.reply('–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª!', reply_markup=stop())
        elif not game_func_two(message.text):
            await message.reply('–Ø –Ω–µ –∑–Ω–∞—é –æ —Ç–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ!', reply_markup=stop())
        else:
            if game_func_one(message.text):
                if len(list(proxy.as_dict().keys())) // 2 == 28:
                    await message.answer('–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! 30 –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤!\n'
                                         '–°–µ–≥–æ–¥–Ω—è —è –ø—Ä–æ–∏–≥—Ä–∞–ª, –ø—Ä–∏–∑–Ω–∞—é, —Ç—ã –±—ã–ª —Ö–æ—Ä–æ—à üòí', reply_markup=end_win_game_kb())
                else:
                    bot_ans = game_func_one(message.text)
                    proxy[f'{message.text.capitalize()}'] = True
                    proxy[f'{bot_ans.capitalize()}'] = True
                    ikb = InlineKeyboardMarkup(row_width=1)
                    alone = InlineKeyboardButton('–ß—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?', callback_data=f'accept:{bot_ans}')
                    ikb.add(alone)
                    await message.reply(text=bot_ans, reply_markup=ikb)
            else:
                await message.reply(text=f'–Ø –Ω–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É {message.text[-1]}', reply_markup=stop())
    await FSMPLayGame.name.set()


@dp.inline_handler()
async def with_wiki(query: types.InlineQuery):
    text = query.query or 'echo'
    wikipedia.set_lang('ru')
    try:
        result = wikipedia.page(title='–≥–æ—Ä–æ–¥ ' + query.query)
    except Exception:
        result = wikipedia.page(title='–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å')
    f = types.InputMessageContent(message_text=result.url)
    articles = [types.InlineQueryResultArticle(
        id='seccccrettaeuioase',
        title=f'–ì–æ—Ä–æ–¥ {query.query}',
        url=result.url,
        input_message_content=f
    )]
    await query.answer(articles, cache_time=1, is_personal=True)
